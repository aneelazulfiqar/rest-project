openapi: 3.0.1
info:
  title: Connect API 1.1
  description: Connect API 1.1
  contact:
    name: Salto KS Support
    email: support@saltoks.com
  version: '1.1'
paths:
  /v1.1/sites/{site_id}/access_groups:
    get:
      tags:
        - AccessGroups
      summary: Gets the list of access groups on a site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupSummaryResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - AccessGroups
      summary: Creates a access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Create access group request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostAccessGroupRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}:
    get:
      tags:
        - AccessGroups
      summary: Gets a single access group by its id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - AccessGroups
      summary: Updates an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Patch access group request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - AccessGroups
      summary: Deletes an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}/locks:
    get:
      tags:
        - AccessGroupsLocks
      summary: Gets the list of locks in access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
        - name: excluded
          in: query
          description: If set to true (?excluded=true) the endpoint returns a list of locks in the site that are NOT part of the specified access group.
          schema:
            type: boolean
            default: false
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockSummaryResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - AccessGroupsLocks
      summary: Adds a lock to an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group to which the lock should be added
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Add lock to an access group request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupLockRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupLockRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostAccessGroupLockRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - AccessGroupsLocks
      summary: Updates the access group list of locks
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request containing lists of ids of locks to be added and removed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupLocksRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupLocksRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupLocksRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}/locks/{lock_id}:
    delete:
      tags:
        - AccessGroupsLocks
      summary: Deletes a lock from an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group whose lock is being deleted
          required: true
          schema:
            type: string
            format: uuid
        - name: lock_id
          in: path
          description: Id of the lock to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}/time_schedules:
    get:
      tags:
        - AccessGroupsTimeSchedules
      summary: Gets the list of access group time schedules
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessScheduleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - AccessGroupsTimeSchedules
      summary: Creates a time schedule for an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Create access group time schedule request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupTimeScheduleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupTimeScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostAccessGroupTimeScheduleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessScheduleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}/time_schedules/{time_schedule_id}:
    patch:
      tags:
        - AccessGroupsTimeSchedules
      summary: Updates time schedule of an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group whose schedule is being updated
          required: true
          schema:
            type: string
            format: uuid
        - name: time_schedule_id
          in: path
          description: Id of the time schedule to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTimeScheduleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchTimeScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchTimeScheduleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessScheduleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - AccessGroupsTimeSchedules
      summary: Deletes a time schedule from an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group whose schedule is being deleted
          required: true
          schema:
            type: string
            format: uuid
        - name: time_schedule_id
          in: path
          description: Id of the time schedule to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/access_groups/{access_group_id}/users:
    get:
      tags:
        - AccessGroupUsers
      summary: Gets list of user in access group
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - AccessGroupUsers
      summary: Add or remove users from access group
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupUsersRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupUsersRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupUsersRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/access_groups/{access_group_id}/users/available:
    get:
      tags:
        - AccessGroupUsers
      summary: Gets list of user out of access group
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}/users:
    post:
      tags:
        - AccessGroupUsers
      summary: Add a user to an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group to which the user should be added
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostAccessGroupUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostAccessGroupUserRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - AccessGroupUsers
      summary: Updates the access group list of users
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request containing lists of ids of users to be added and removed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupUsersRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupUsersRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchAccessGroupUsersRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - AccessGroupUsers
      summary: Gets the list of users in access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group
          required: true
          schema:
            type: string
            format: uuid
        - name: excluded
          in: query
          description: Flag to return excluded users from access group
          schema:
            type: boolean
            default: false
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserShortResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/access_groups/{access_group_id}/users/{user_id}:
    delete:
      tags:
        - AccessGroupUsers
      summary: Deletes a user from an access group
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          description: Id of the access group whose user is being deleted
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          description: Id of the user to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{lock_id}/easy_office_mode_schedule:
    get:
      tags:
        - EasyOfficeModeSchedules
      summary: Gets the Easy Office Mode for a lock if it exists
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: lock_id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EasyOfficeModeScheduleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - EasyOfficeModeSchedules
      summary: Sets/updates the Easy Office Mode for a lock
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: lock_id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Put Easy Office Mode request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEomScheduleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutEomScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutEomScheduleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EasyOfficeModeScheduleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - EasyOfficeModeSchedules
      summary: Deletes the Easy Office Mode of a lock if it exists
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: lock_id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/access_groups/{access_group_id}:
    delete:
      tags:
        - EloxxAccessGroups
      summary: Deletes access group by Id
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: access_group_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entries:
    get:
      tags:
        - Entries
      summary: Gets the list of entries the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: c_l_p-_continuation-_token
          in: header
          description: Continuation token used for pagination
          schema:
            type: string
            default: ''
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
        - name: continuationToken
          in: header
          description: 'Continuation token used for pagination. Should be provided in a custom header: CLP-Continuation-Token'
          schema:
            type: string
            default: null
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entries/export:
    get:
      tags:
        - Entries
      summary: Exports a list of entries the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: from_date
          in: query
          description: Export's starting date
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          description: Export's ending date
          schema:
            type: string
            format: date-time
        - name: username
          in: query
          description: Username Filter
          schema:
            type: string
        - name: lock_name
          in: query
          description: LockName Filter
          schema:
            type: string
        - name: event_category
          in: query
          description: Event Category Filter
          schema:
            type: string
        - name: event_detail
          in: query
          description: Event Detail Filter
          schema:
            type: string
        - name: access_by
          in: query
          description: AccessBy Filter
          schema:
            type: string
        - name: access_detail
          in: query
          description: Export AccessDetail Filter
          schema:
            type: string
        - name: export_file_name
          in: query
          description: Response File Name
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entry_message_rule:
    get:
      tags:
        - EntryMessageRules
      summary: Gets all entry message rules in the site
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageRuleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - EntryMessageRules
      summary: Adds an entry message rule to the site
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEntryMessageRuleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostEntryMessageRuleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostEntryMessageRuleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entry_message_rule/{id}:
    get:
      tags:
        - EntryMessageRules
      summary: Gets a single entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - EntryMessageRules
      summary: Updates the entry message rule info
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEntryMessageRuleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchEntryMessageRuleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchEntryMessageRuleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - EntryMessageRules
      summary: Deletes the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entry_message_rule/{id}/time_schedules:
    get:
      tags:
        - EntryMessageRules
      summary: Gets the time schedules associated with the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageScheduleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - EntryMessageRules
      summary: Adds a time schedule to the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEntryMessageRuleTimeScheduleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostEntryMessageRuleTimeScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostEntryMessageRuleTimeScheduleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageScheduleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entry_message_rule/{id}/users:
    get:
      tags:
        - EntryMessageRules
      summary: Gets users associated with the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummaryResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - EntryMessageRules
      summary: Updates users related to the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entry_message_rule/{id}/locks:
    get:
      tags:
        - EntryMessageRules
      summary: Gets the locks associated to the entry message rule
      parameters:
        - name: site_id
          in: path
          description: site Id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: entry message rule id
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockSummaryResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - EntryMessageRules
      summary: Updates locks related to the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/entry_message_rule/{id}/time_schedules/{time_schedule_id}:
    patch:
      tags:
        - EntryMessageRules
      summary: Updates a time schedule related to the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: time_schedule_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTimeScheduleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchTimeScheduleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchTimeScheduleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryMessageScheduleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - EntryMessageRules
      summary: Removes the time schedule from the entry message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: time_schedule_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/floors:
    post:
      tags:
        - Floors
      summary: Creates a new floor in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFloorRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostFloorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostFloorRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Floors
      summary: Gets floors of a site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorSummaryResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/floors/{id}:
    get:
      tags:
        - Floors
      summary: Gets a floor by id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the floor
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Floors
      summary: Deletes a floor in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the floor
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          description: "Optional parameter, default value is false.\r\n            When false: If a floor is linked to one or more locks, it will not be possible to delete it.\r\n            When true: floor can be deleted even if it has lock relationships.\r\n            Locks won't be deleted, only the relationships will."
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Floors
      summary: Updates a new floor in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the floor
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchFloorRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchFloorRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchFloorRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/floors/{id}/locks:
    get:
      tags:
        - Floors
      summary: Gets locks belonging to a floor
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the floor
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponseExtendedPagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/incident_message_rule:
    get:
      tags:
        - IncidentMessageRules
      summary: Gets all Incident message rules in the site
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentMessageRuleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/incident_message_rule/{id}:
    get:
      tags:
        - IncidentMessageRules
      summary: Gets a single Incident message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentMessageRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - IncidentMessageRules
      summary: Updates the Incident message rule info
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchIncidentMessageRuleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchIncidentMessageRuleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchIncidentMessageRuleRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentMessageRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/incident_message_rule/{id}/locks:
    get:
      tags:
        - IncidentMessageRules
      summary: Gets the locks associated to the Incident message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockSummaryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - IncidentMessageRules
      summary: Updates locks related to the incident message rule
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchMessageRuleRelationRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/incidents:
    get:
      tags:
        - Incidents
      summary: Gets the list of incidents the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: c_l_p-_continuation-_token
          in: header
          description: Continuation token used for pagination
          schema:
            type: string
            default: ''
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
        - name: continuationToken
          in: header
          description: 'Continuation token used for pagination. Should be provided in a custom header: CLP-Continuation-Token'
          schema:
            type: string
            default: null
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/incidents/export:
    get:
      tags:
        - Incidents
      summary: Exports a list of incidents the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: from_date
          in: query
          description: Export's starting date
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          description: Export's ending date
          schema:
            type: string
            format: date-time
        - name: username
          in: query
          description: Username Filter
          schema:
            type: string
        - name: lock_name
          in: query
          description: LockName Filter
          schema:
            type: string
        - name: event_category
          in: query
          description: Event Category Filter
          schema:
            type: string
        - name: event_detail
          in: query
          description: Event Detail Filter
          schema:
            type: string
        - name: access_by
          in: query
          description: AccessBy Filter
          schema:
            type: string
        - name: access_detail
          in: query
          description: Export AccessDetail Filter
          schema:
            type: string
        - name: export_file_name
          in: query
          description: Response File Name
          schema:
            type: string
      responses:
        '400':
          description: Bad Request
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/installer_access:
    get:
      tags:
        - InstallerAccess
      summary: Gets an installer access information for the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallerAccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - InstallerAccess
      summary: Enables or disables the installer access of the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutInstallerAccessRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutInstallerAccessRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutInstallerAccessRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallerAccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/installer_access/iqs:
    get:
      tags:
        - InstallerAccess
      summary: Gets a list of IQs with their installer access state
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallerAccessIqsResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/installer_access/iqs/{iq_id}:
    patch:
      tags:
        - InstallerAccess
      summary: Enables installer access to the specified IQ
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: iq_id
          in: path
          description: Id of the IQ
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchInstallerAccessIqRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchInstallerAccessIqRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchInstallerAccessIqRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallerAccessIqsResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/pin:
    get:
      tags:
        - IqPin
      summary: Gets the pin of the current user for that IQ and sends it as SMS
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
        - name: send_email
          in: query
          description: Flag to send the email instead of SMS
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - IqPin
      summary: Changes the pin of the user
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPinRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutPinRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutPinRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/pin/{user_id}:
    delete:
      tags:
        - IqPin
      summary: Resets an activation
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          description: user id
          required: true
          schema:
            type: string
            format: uuid
        - name: otp
          in: query
          description: Generated one time password
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs:
    get:
      tags:
        - Iqs
      summary: Gets the list of IQs the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Iqs
      summary: Activates an IQ in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIqRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostIqRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostIqRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}:
    get:
      tags:
        - Iqs
      summary: Gets a single IQ by id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the iq
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Iqs
      summary: Updates IQ information
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchIqRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchIqRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchIqRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/secret:
    get:
      tags:
        - Iqs
      summary: Get the secret of the IQ
      description: If it is requested without a OTP the first secret is fetched if possible
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
        - name: otp
          in: query
          description: Generated one time password
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqSecretResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/signal_strength:
    get:
      tags:
        - Iqs
      summary: Gets the last known signal strength of the IQ
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
        - name: force_refresh
          in: query
          description: If this is set to true the signal strength is directly asked to the IQ
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalStrengthResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/replace:
    post:
      tags:
        - Iqs
      summary: Replaces the IQ with a new one
      description: This call will result with a different IQ id! The old one will be inaccessible
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceIqRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReplaceIqRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReplaceIqRequest'
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/restore:
    post:
      tags:
        - Iqs
      summary: Restores the IQ after reset
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: id of the IQ
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/iqs/{id}/tree:
    get:
      tags:
        - IqTree
      summary: Gets a tree of the IQ
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the IQ
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeItemResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - IqTree
      summary: Sets the hardware tree of the IQ
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Iq id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIqTreeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutIqTreeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutIqTreeRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeItemResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers:
    get:
      tags:
        - Lockers
      summary: Gets list of Lockers
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers/{id}:
    get:
      tags:
        - Lockers
      summary: Gets Locker by id
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Lockers
      summary: Update Locker by id
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLockerRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchLockerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchLockerRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers/assignments:
    get:
      tags:
        - Lockers
      summary: Gets Locker Assignments
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerAssignmentResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Lockers
      summary: Gets Locker by id
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAssignmentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutAssignmentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutAssignmentRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers/{id}/action:
    post:
      tags:
        - Lockers
      summary: Perform Lock Action
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockActionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LockActionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LockActionRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers/occupations:
    get:
      tags:
        - LockersOccupations
      summary: Gets list of occupied lockers by user
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - LockersOccupations
      summary: Occupy locker
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OccupyLockerRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/OccupyLockerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OccupyLockerRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers/occupations/available:
    get:
      tags:
        - LockersOccupations
      summary: Gets list of available lockers for occupation
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockerResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/eloxx/lockers/occupations/{lock_id}:
    delete:
      tags:
        - LockersOccupations
      summary: Delete locker occupation
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: lock_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}/offline_keys:
    patch:
      tags:
        - LockOfflineKeys
      summary: Sets and(or) revokes the guaranteed Offline Access for a list of user keys on a specific lock
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLockOfflineAccessRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchLockOfflineAccessRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchLockOfflineAccessRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - LockOfflineKeys
      summary: Gets all keys that have offline access to the lock (when excluded=true gets keys that can get offline access)
      parameters:
        - name: site_id
          in: path
          description: site Id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: lock Id
          required: true
          schema:
            type: string
            format: uuid
        - name: excluded
          in: query
          description: "when excluded=true gets keys that can get offline access:\r\n            they must have online access to the lock, they can't be pin keys"
          schema:
            type: boolean
            default: false
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedSiteUserKeyResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks:
    get:
      tags:
        - Locks
      summary: Gets the list of locks the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Locks
      summary: Adds a new lock to the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLockRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateLockRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateLockRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}:
    get:
      tags:
        - Locks
      summary: Gets a single lock by id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponseExtended'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Locks
      summary: Updates lock info if the current user has permissions
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock to be patched
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Patch lock request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLockRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchLockRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchLockRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Locks
      summary: Deletes the lock from the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}/locking:
    patch:
      tags:
        - Locks
      summary: Performs unlock action or puts the lock in office mode if the current user has permissions
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockingRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LockingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LockingRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}/detach:
    patch:
      tags:
        - Locks
      summary: Detaches the lock from the Iq
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachLockRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DetachLockRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DetachLockRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}/tag_registration:
    patch:
      tags:
        - Locks
      summary: Activates the lock tag registration mode if the current user has permissions
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRegistrationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TagRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagRegistrationRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{lock_id}/access_groups:
    get:
      tags:
        - LocksAccessGroups
      summary: Returns the list of access groups by lock id
      parameters:
        - name: site_id
          in: path
          description: Site Id
          required: true
          schema:
            type: string
            format: uuid
        - name: lock_id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}/settings:
    get:
      tags:
        - LockSettings
      summary: Gets settings associated with the lock
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockSettingsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - LockSettings
      summary: Create or update settings associated with the lock
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Settings request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLockSettingsRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutLockSettingsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutLockSettingsRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockSettingsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/locks/{id}/incident_message_rules:
    get:
      tags:
        - LocksIncidentMessageRules
      summary: Gets the incident message rules belonging to a lock
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the lock
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentMessageRuleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/me:
    get:
      tags:
        - Me
      summary: Get the user's own information
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/me/{site_id}/activated_iqs:
    get:
      tags:
        - Me
      summary: Returns list of activated Iqs of current user
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IqPinResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/access_codes:
    get:
      tags:
        - PodAccessCodes
      summary: Get a list of access codes generated for pod
      parameters:
        - name: site_id
          in: path
          description: Id of the site to create the Pod in
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the pod
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodAccessCodeWithOwnerResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - PodAccessCodes
      summary: Create a new Access Code
      parameters:
        - name: site_id
          in: path
          description: Id of the site to create the Pod in
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the pod
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: request to create the Pod Access Code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutPodAccessCodeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutPodAccessCodeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutPodAccessCodeRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodAccessCodeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - PodAccessCodes
      summary: Revoke active access code for the pod
      parameters:
        - name: site_id
          in: path
          description: Id of the site to create the Pod in
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the pod
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/access_rule:
    put:
      tags:
        - PodAccessRules
      summary: Replaces pod access rule type and its schedule with new values
      parameters:
        - name: site_id
          in: path
          description: Id of the site Pod belongs to
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: pod id to modify
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: pod access rule to replace current one
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PodAccessRuleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PodAccessRuleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PodAccessRuleRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/guests/{id}:
    get:
      tags:
        - PodGuests
      summary: Gets information about Pod Guest by id
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodGuestResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - PodGuests
      summary: Patch Pod Guest
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the Pod in the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the Pod Guest in the Site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request containing new Access Rule for Pod Guest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPodGuestRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchPodGuestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchPodGuestRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/guests:
    patch:
      tags:
        - PodGuests
      summary: Add and Remove Guests from a Pod
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the Pod in the Site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request containing Guests to add and to remove
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPodGuestsRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchPodGuestsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchPodGuestsRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/pods/guests:
    post:
      tags:
        - PodGuestsByAccessCode
      summary: Create a guest for a Pod (this action can only be performed by code).
      description: "This endpoint can only be called by an \"anonymous\" user (using access code).\r\n            The access token contains information that is used to match the user with a correct site and a correct pod."
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPodGuestByAccessCodeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostPodGuestByAccessCodeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostPodGuestByAccessCodeRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/locks:
    get:
      tags:
        - PodLocks
      summary: Get a list of locks that belong to pod
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the pod
          required: true
          schema:
            type: string
            format: uuid
        - name: excluded
          in: query
          description: "If set to true (?excluded=true) the endpoint returns a list of locks\r\n            in the site that are NOT part of the specified Pod."
          schema:
            type: boolean
            default: false
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodLockResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - PodLocks
      summary: Add locks to pod or remove locks from pod
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Consists of the list of the locks to add and list of the locks to remove from the pod
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPodLocksRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchPodLocksRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchPodLocksRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/members:
    patch:
      tags:
        - PodMembers
      summary: Add and Remove Members from a Pod
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the Pod in the Site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request containing Members to add and to remove
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPodMembersRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchPodMembersRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchPodMembersRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{id}:
    get:
      tags:
        - Pods
      summary: Gets a pod by id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the pod
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodWithAccessRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Pods
      summary: Update Pod's properties
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the Pod in the Site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: PatchPodRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPodRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchPodRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchPodRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Pods
      summary: Completely remove pod from the site
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the Pod in the Site
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods:
    get:
      tags:
        - Pods
      summary: Get a list of pods within a site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodWithAccessRuleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Pods
      summary: Create a new Pod
      parameters:
        - name: site_id
          in: path
          description: Id of the site to create the Pod in
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: request to create the Pod
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPodRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostPodRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostPodRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodWithAccessRuleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{id}/clean:
    patch:
      tags:
        - Pods
      summary: Clean up the pod
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the Pod in the Site
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/tags:
    get:
      tags:
        - PodTags
      summary: Get a list of tags assigned to a pod
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteTagResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/pods/{pod_id}/users:
    get:
      tags:
        - PodUsers
      summary: Get a list of Pod Members and Guests that belong to pod
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: pod_id
          in: path
          description: Id of the pod
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodUserResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/repeaters:
    get:
      tags:
        - Repeaters
      summary: Gets the list of repeaters the current user can view in the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeaterResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Repeaters
      summary: Adds a new repeater to the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRepeaterRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostRepeaterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostRepeaterRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeaterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/repeaters/{id}:
    get:
      tags:
        - Repeaters
      summary: Gets a single Repeater by id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the repeater
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeaterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Repeaters
      summary: Updates repeater info
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the repeater
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRepeaterRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchRepeaterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchRepeaterRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeaterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Repeaters
      summary: Deletes a Repeater
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: repeater id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/reports/timeattendance:
    post:
      tags:
        - Reports
      summary: "Requests time and attendance report for site\r\nuser will get an email with csv attachment once report is generated"
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeAttendanceReportRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TimeAttendanceReportRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TimeAttendanceReportRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/roles:
    get:
      tags:
        - Roles
      summary: Lists the available roles for the current accessing client
      parameters:
        - name: site_id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{id}:
    get:
      tags:
        - Sites
      summary: Gets a single site
      parameters:
        - name: id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedSiteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Sites
      summary: Updates a site
      parameters:
        - name: id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSiteRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchSiteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchSiteRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Sites
      summary: Deletes the site
      parameters:
        - name: id
          in: path
          description: Site Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites:
    get:
      tags:
        - Sites
      summary: Gets the list of sites the current user can view
      parameters:
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Sites
      summary: Creates a new site
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSiteRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostSiteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostSiteRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{id}/me:
    get:
      tags:
        - Sites
      summary: Gets the site user's own information, with the site user's specific data
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: include_pod_info
          in: query
          description: "Optional. If true - response will be populated with 2 more\r\n            properties ('member_of_pods' and 'guest_of_pods') that contains information about Pods\r\n            related to the user"
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{site_user_id}/access_groups:
    get:
      tags:
        - SiteUserAccessGroups
      summary: Returns the list of access groups by site user id
      parameters:
        - name: site_id
          in: path
          description: Site Id
          required: true
          schema:
            type: string
            format: uuid
        - name: site_user_id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessGroupResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/me/devices:
    get:
      tags:
        - SiteUserDevices
      summary: Gets the list of devices for the current user
      parameters:
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserDeviceResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - SiteUserDevices
      summary: Adds a new device to the user
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNewSiteUserDeviceRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostNewSiteUserDeviceRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostNewSiteUserDeviceRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserDeviceWithCertificateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/me/devices/{id}:
    get:
      tags:
        - SiteUserDevices
      summary: Gets a device by id for the current user
      parameters:
        - name: id
          in: path
          description: Id of the device
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserDeviceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - SiteUserDevices
      summary: Deletes user's device by id
      parameters:
        - name: id
          in: path
          description: Id of the device
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/me/devices/{id}/mkey:
    get:
      tags:
        - SiteUserDevices
      summary: Gets a digital key by device id if the current device is activated
      parameters:
        - name: id
          in: path
          description: Id of the device
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/me/devices/{id}/certificate:
    put:
      tags:
        - SiteUserDevices
      summary: Replaces the existing certificate for the existing user's device
      parameters:
        - name: id
          in: path
          description: Id of the device
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSiteUserDeviceCertificateRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutSiteUserDeviceCertificateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutSiteUserDeviceCertificateRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserDeviceWithCertificateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{site_user_id}/keys:
    get:
      tags:
        - SiteUserKeys
      summary: Returns the list of keys for the specific user
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: site_user_id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserKeyResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{site_user_id}/keys/{id}:
    patch:
      tags:
        - SiteUserKeys
      summary: Block/unblocks a site user key by its id, enables/disables offline access for the key
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: site_user_id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the key
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: PatchKeyRequest request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchKeyRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchKeyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchKeyRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserKeyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users:
    get:
      tags:
        - SiteUsers
      summary: Gets the list of site users the current user can view
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: include_pod_info
          in: query
          description: "Optional. If true - response will be populated with 2 more\r\n            properties ('member_of_pods' and 'guest_of_pods') that contains information about Pods\r\n            related to the user"
          schema:
            type: boolean
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - SiteUsers
      summary: Adds a new user to the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNewSiteUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostNewSiteUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostNewSiteUserRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{id}:
    get:
      tags:
        - SiteUsers
      summary: Gets a site user by id if the current user can view
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
        - name: include_pod_info
          in: query
          description: "Optional. If true - response will be populated with 2 more\r\n            properties ('member_of_pods' and 'guest_of_pods') that contains information about Pods\r\n            related to the user"
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - SiteUsers
      summary: Deletes a site user by id if the current user has permissions
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - SiteUsers
      summary: Edit a site user by id if the current user has permissions
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSiteUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchSiteUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchSiteUserRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/existing:
    post:
      tags:
        - SiteUsers
      summary: Adds an existing user to the site
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostExistingSiteUserRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PostExistingSiteUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostExistingSiteUserRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{id}/activated_iqs:
    get:
      tags:
        - SiteUsers
      summary: Returns the list of activated IQs for the specific user
      parameters:
        - name: site_id
          in: path
          description: Site ID
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivatedIqResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{id}/subscription:
    patch:
      tags:
        - SiteUsers
      summary: Edit a site user's subscription state by id
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchSiteUserSubscriptionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PatchSiteUserSubscriptionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchSiteUserSubscriptionRequest'
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{id}/resend_invite:
    patch:
      tags:
        - SiteUsers
      summary: Resend invitation email for a user that hasn't completed their profile
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/users/{id}/pin:
    put:
      tags:
        - SiteUsers
      summary: Create or update site user pin
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Id of the site user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSiteUserPinRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PutSiteUserPinRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PutSiteUserPinRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/subscription:
    get:
      tags:
        - Subscriptions
      summary: Gets the details of the current subscription of the site
      parameters:
        - name: site_id
          in: path
          description: id of site
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/tags/{id}:
    get:
      tags:
        - Tags
      summary: Gets a single tag
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Tag id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteTagResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Tags
      summary: Deletes the tag
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: id of the tag
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/tags:
    get:
      tags:
        - Tags
      summary: Gets the list of site tags this user can view
      parameters:
        - name: site_id
          in: path
          description: Site id
          required: true
          schema:
            type: string
            format: uuid
        - name: $filter
          in: query
          description: Filter the results using OData syntax.
          schema:
            type: string
        - name: $orderby
          in: query
          description: Order the results using OData syntax.
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of results to skip.
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of results to return.
          schema:
            type: integer
        - name: $inlinecount
          in: query
          description: Return the total count.
          schema:
            type: string
            default: none
            example: allpages
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteTagResponsePagedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/users/search:
    get:
      tags:
        - Users
      summary: search for a user by tag or email
      parameters:
        - name: search_for
          in: query
          description: ''
          schema:
            type: string
        - name: for_site_id
          in: query
          description: ''
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1.1/sites/{site_id}/vouchers:
    get:
      tags:
        - Vouchers
      summary: Gets a voucher by voucher code
      parameters:
        - name: site_id
          in: path
          description: Id of the Site
          required: true
          schema:
            type: string
            format: uuid
        - name: voucher_code
          in: query
          description: Code of the Voucher
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Vouchers
      summary: Redeem Voucher
      parameters:
        - name: site_id
          in: path
          description: Id of the site
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: request containing voucher code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeemVoucherRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RedeemVoucherRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RedeemVoucherRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    AccessGroupResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the access group
          format: uuid
        customer_reference:
          type: string
          description: Name of the access group
          nullable: true
      additionalProperties: false
    AccessGroupResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    AccessGroupSummaryResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the access group
          format: uuid
        customer_reference:
          type: string
          description: Name of the access group
          nullable: true
        lock_count:
          type: integer
          description: Number of locks that are part of this access group
          format: int32
        user_count:
          type: integer
          description: Number of users that are part of this access group
          format: int32
      additionalProperties: false
    AccessGroupSummaryResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AccessGroupSummaryResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    AccessScheduleResponse:
      type: object
      properties:
        id:
          type: string
          description: Access schedule Id
          format: uuid
        monday:
          type: boolean
          description: is TimeSchedule enabled on Monday, set to true if enabled
        tuesday:
          type: boolean
          description: is TimeSchedule enabled on Tuesday, set to true if enabled
        wednesday:
          type: boolean
          description: is TimeSchedule enabled on Wednesday, set to true if enabled
        thursday:
          type: boolean
          description: is TimeSchedule enabled on Thursday, set to true if enabled
        friday:
          type: boolean
          description: is TimeSchedule enabled on Friday, set to true if enabled
        saturday:
          type: boolean
          description: is TimeSchedule enabled on Saturday, set to true if enabled
        sunday:
          type: boolean
          description: is TimeSchedule enabled on Sunday, set to true if enabled
        start_time:
          type: string
          description: TimeSchedule start time
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: TimeSchedule end time
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: TimeSchedule start date
          format: date-time
          nullable: true
        end_date:
          type: string
          description: TimeSchedule end date
          format: date-time
          nullable: true
      additionalProperties: false
    AccessScheduleResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AccessScheduleResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    ActionType:
      enum:
        - enable
        - disable
      type: string
    ActivatedIqResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the IQ
          format: uuid
        customer_reference:
          type: string
          description: Name of the IQ
          nullable: true
      additionalProperties: false
    ActivatedIqResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ActivatedIqResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    BaseTimeScheduleResponse:
      type: object
      properties:
        monday:
          type: boolean
          description: is TimeSchedule enabled on Monday, set to true if enabled
        tuesday:
          type: boolean
          description: is TimeSchedule enabled on Tuesday, set to true if enabled
        wednesday:
          type: boolean
          description: is TimeSchedule enabled on Wednesday, set to true if enabled
        thursday:
          type: boolean
          description: is TimeSchedule enabled on Thursday, set to true if enabled
        friday:
          type: boolean
          description: is TimeSchedule enabled on Friday, set to true if enabled
        saturday:
          type: boolean
          description: is TimeSchedule enabled on Saturday, set to true if enabled
        sunday:
          type: boolean
          description: is TimeSchedule enabled on Sunday, set to true if enabled
        start_time:
          type: string
          description: TimeSchedule start time
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: TimeSchedule end time
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: TimeSchedule start date
          format: date-time
          nullable: true
        end_date:
          type: string
          description: TimeSchedule end date
          format: date-time
          nullable: true
      additionalProperties: false
    BatteryStates:
      enum:
        - critical
        - low
        - good
        - fresh
        - none
        - unknown
      type: string
    CreateLockRequest:
      required:
        - activation_code
        - customer_reference
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the Lock by the client
        activation_code:
          type: string
          description: The activation code written on the physical lock
      additionalProperties: false
    DataSyncState:
      enum:
        - synced
        - pending
        - not_synced
        - failed
      type: string
    DetachLockRequest:
      required:
        - iq_link_state
      type: object
      properties:
        iq_link_state:
          $ref: '#/components/schemas/IqLinkState'
        otp:
          type: string
          description: A valid otp
          nullable: true
      additionalProperties: false
    EasyOfficeModeScheduleResponse:
      type: object
      properties:
        monday:
          type: boolean
          description: is TimeSchedule enabled on Monday, set to true if enabled
        tuesday:
          type: boolean
          description: is TimeSchedule enabled on Tuesday, set to true if enabled
        wednesday:
          type: boolean
          description: is TimeSchedule enabled on Wednesday, set to true if enabled
        thursday:
          type: boolean
          description: is TimeSchedule enabled on Thursday, set to true if enabled
        friday:
          type: boolean
          description: is TimeSchedule enabled on Friday, set to true if enabled
        saturday:
          type: boolean
          description: is TimeSchedule enabled on Saturday, set to true if enabled
        sunday:
          type: boolean
          description: is TimeSchedule enabled on Sunday, set to true if enabled
        start_time:
          type: string
          description: TimeSchedule start time
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: TimeSchedule end time
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: TimeSchedule start date
          format: date-time
          nullable: true
        end_date:
          type: string
          description: TimeSchedule end date
          format: date-time
          nullable: true
      additionalProperties: false
    EntryMessageRuleResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the rule
          format: uuid
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the Access Group by the client
          nullable: true
        rule_type:
          $ref: '#/components/schemas/RuleType'
        send_mail:
          type: boolean
          description: Setting to receive a mail on the entry
          nullable: true
        send_sms:
          type: boolean
          description: Setting to receive a sms on the entry
        send_push:
          type: boolean
          description: Setting to receive a push message on the entry
        on_inside_handle:
          type: boolean
          description: Setting to receive a message on an inside handle entry
      additionalProperties: false
    EntryMessageRuleResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EntryMessageRuleResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    EntryMessageScheduleResponse:
      type: object
      properties:
        id:
          type: string
          description: Entry message schedule Id
          format: uuid
        monday:
          type: boolean
          description: is TimeSchedule enabled on Monday, set to true if enabled
        tuesday:
          type: boolean
          description: is TimeSchedule enabled on Tuesday, set to true if enabled
        wednesday:
          type: boolean
          description: is TimeSchedule enabled on Wednesday, set to true if enabled
        thursday:
          type: boolean
          description: is TimeSchedule enabled on Thursday, set to true if enabled
        friday:
          type: boolean
          description: is TimeSchedule enabled on Friday, set to true if enabled
        saturday:
          type: boolean
          description: is TimeSchedule enabled on Saturday, set to true if enabled
        sunday:
          type: boolean
          description: is TimeSchedule enabled on Sunday, set to true if enabled
        start_time:
          type: string
          description: TimeSchedule start time
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: TimeSchedule end time
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: TimeSchedule start date
          format: date-time
          nullable: true
        end_date:
          type: string
          description: TimeSchedule end date
          format: date-time
          nullable: true
      additionalProperties: false
    EntryMessageScheduleResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EntryMessageScheduleResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    EntryResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the entry
          format: uuid
        event_category:
          type: string
          description: The category of the event
          nullable: true
        event_detail:
          type: string
          description: Additional details of the event
          nullable: true
        utc_date_time:
          type: string
          description: The UTC timestamp that marks when the event happened
          format: date-time
        local_date_time:
          type: string
          description: The timestamp that marks when the event happened but converted to the timezone of the IQ the lock is connected to
          format: date-time
        lock_id:
          type: string
          description: id of the lock
          format: uuid
          nullable: true
        lock_mac_address:
          type: string
          description: Mac address of the lock
          nullable: true
        lock_customer_reference:
          type: string
          description: Name of the lock
          nullable: true
        user_id:
          type: string
          description: id of the user
          format: uuid
          nullable: true
        user_first_name:
          type: string
          description: First name of the user
          nullable: true
        user_last_name:
          type: string
          description: Last name of the user
          nullable: true
        user_image_url:
          type: string
          description: The url of the profile picture
          nullable: true
        user_alias:
          type: string
          description: user's alias on the site
          nullable: true
        iq_id:
          type: string
          description: id of the IQ
          format: uuid
        iq_customer_reference:
          type: string
          description: Name of the IQ
          nullable: true
        iq_mac_address:
          type: string
          description: Mac address of the IQ
          nullable: true
        iq_revision:
          type: string
          description: Iq version
          nullable: true
        exit_requested:
          type: boolean
          description: Indicates if it is an exit event.
        access_by:
          type: string
          description: What was used for access (tag, remote, etc.)
          nullable: true
        access_detail:
          type: string
          description: Access Details (i.e. tag number when AccessBy is tag)
          nullable: true
      additionalProperties: false
    EntryResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EntryResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    ErrorResponse:
      type: object
      properties:
        ErrorCode:
          type: string
          nullable: true
        Message:
          type: string
          nullable: true
      additionalProperties: false
    ExtendedSiteUserKeyResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserSummaryWithAliasResponse'
        id:
          type: string
          description: The id of the key (being the relation between the User and a Tag / Digital Key / Pin / Wallet)
          format: uuid
        key_identifier:
          type: string
          description: The name or number identifying the key.
          nullable: true
        key_id:
          type: string
          description: The id identifying the Tag / Digital Key / Pin / Wallet
          format: uuid
        type:
          $ref: '#/components/schemas/KeyType'
        expiry_date:
          type: string
          description: "The expiry date of the key.\r\nNull if there is no expiration date for the key"
          format: date-time
          nullable: true
        registration_date:
          type: string
          description: The registration date of the key
          format: date-time
        blocked:
          type: boolean
          description: If the key is blocked for this site
        offline_access:
          type: boolean
          description: "Depending on the context signifies either\r\na) whether the key has offline access for this site,\r\nor b) whether the key has offline access for a certain lock"
      additionalProperties: false
      description: Relationship between a SiteUser and a Tag / Digital Key / Pin
    ExtendedSiteUserKeyResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedSiteUserKeyResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    FeatureCode:
      enum:
        - apple_wallet_key
        - google_wallet_key
      type: string
    FeatureResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the feature
          format: uuid
        code:
          $ref: '#/components/schemas/FeatureCode'
      additionalProperties: false
    FloorSummaryResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the floor
          format: uuid
        number:
          type: integer
          description: Floor number
          format: int32
          nullable: true
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the floor by the client
          nullable: true
        lock_count:
          type: integer
          description: Number of locks belonging to this floor
          format: int32
      additionalProperties: false
    FloorSummaryResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FloorSummaryResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    HardwareCommunicationType:
      enum:
        - rf_net
        - blue_net
      type: string
    HardwareType:
      enum:
        - lock
        - repeater
      type: string
    IncidentMessageRuleResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the rule
          format: uuid
        incident:
          $ref: '#/components/schemas/IncidentType'
        send_mail:
          type: boolean
          description: Setting to receive a mail on the entry
        send_sms:
          type: boolean
          description: Setting to receive a sms on the entry
        send_push:
          type: boolean
          description: Setting to receive a push message on the entry
      additionalProperties: false
    IncidentMessageRuleResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IncidentMessageRuleResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    IncidentResponse:
      type: object
      properties:
        id:
          type: string
          description: The database id of the incident
          format: uuid
        event_category:
          type: string
          description: The category of the event
          nullable: true
        event_detail:
          type: string
          description: Additional details of the event
          nullable: true
        utc_date_time:
          type: string
          description: The UTC timestamp that marks when the event happened
          format: date-time
        local_date_time:
          type: string
          description: The timestamp that marks when the event happened but converted to the timezone of the IQ the lock is connected to
          format: date-time
        lock_id:
          type: string
          description: id of the lock
          format: uuid
          nullable: true
        lock_mac_address:
          type: string
          description: Mac address of the lock
          nullable: true
        lock_customer_reference:
          type: string
          description: Name of the lock
          nullable: true
        iq_id:
          type: string
          description: id of the IQ
          format: uuid
        iq_customer_reference:
          type: string
          description: Name of the IQ
          nullable: true
        iq_mac_address:
          type: string
          description: Mac address of the IQ
          nullable: true
        iq_revision:
          type: string
          description: Iq version
          nullable: true
      additionalProperties: false
    IncidentResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IncidentResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    IncidentType:
      enum:
        - unknown
        - intrusion_alarm_start
        - tamper_alarm_start
        - door_left_open_alarm_start
        - door_left_open_alarm_end
        - intrusion_alarm_end
        - tamper_alarm_end
        - lock_connection_lost
        - lock_connection_restored
        - lock_ppd_connected
        - low_battery_warning
        - lock_clock_failure
        - lock_time_set
        - operation_not_completed
        - lock_reset
        - easy_office_mode_end_failed
        - iq_connection_lost
        - iq_connection_restored
      type: string
    InstallationState:
      enum:
        - installation
        - released
        - self_installed
      type: string
    InstallerAccessIqsResponse:
      type: object
      properties:
        iq_id:
          type: string
          description: The database id of the IQ
          format: uuid
        customer_reference:
          type: string
          description: The name of the IQ
          nullable: true
        online:
          type: boolean
          description: The connection state of the IQ to the cloud.
        enabled:
          type: boolean
          description: Is Installer Access enabled
        access_expiry_date:
          type: string
          description: Installer Access expiration date
          format: date-time
          nullable: true
      additionalProperties: false
    InstallerAccessIqsResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/InstallerAccessIqsResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    InstallerAccessResponse:
      type: object
      properties:
        customer_uid:
          type: string
          description: The customer uid of the site
          nullable: true
        expiry_date:
          type: string
          description: The UTC timestamp the access expires
          format: date-time
        is_active:
          type: boolean
          description: If the access is still active
        token:
          type: string
          description: The token for this access
          nullable: true
      additionalProperties: false
    IqExtendedSummaryResponse:
      type: object
      properties:
        mac_address:
          type: string
          description: Mac address of the IQ
          nullable: true
        is_online:
          type: boolean
          description: Is IQ online or not
        revision:
          type: string
          description: Iq version
          nullable: true
        id:
          type: string
          description: Id of the IQ
          format: uuid
        customer_reference:
          type: string
          description: Name of the IQ
          nullable: true
      additionalProperties: false
    IqLinkState:
      enum:
        - attached_pending
        - attached
        - detached
        - detached_pending
      type: string
    IqPinResponse:
      type: object
      properties:
        iq_id:
          type: string
          description: Iq Id
          format: uuid
        activation_date:
          type: string
          description: Date of iq activation
          format: date-time
          nullable: true
        activated:
          type: boolean
          description: Status of Iq pin
      additionalProperties: false
    IqPinResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IqPinResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    IqResponse:
      type: object
      properties:
        id:
          type: string
          description: The database id of the IQ
          format: uuid
        customer_reference:
          type: string
          description: The name of the IQ
          nullable: true
        time_zone:
          type: string
          description: The IQ time zone
          nullable: true
        mac:
          type: string
          description: The first 6 digits of the activation code written on the physical IQ
          nullable: true
        operator:
          type: string
          description: The name of the Operator the IQ is connected to
          nullable: true
        state:
          $ref: '#/components/schemas/IqState'
        restore_required:
          type: boolean
          description: If the IQ was reset, restore actions need to be taken - like resetting the tree
        reset_date:
          type: string
          description: The last time stamp when the IQ was reset
          format: date-time
          nullable: true
        online:
          type: boolean
          description: The connection state of the IQ to the cloud.
        led_enabled:
          type: boolean
          description: Is LED enabled or not.
        data_sync_state:
          $ref: '#/components/schemas/DataSyncState'
        signal_strength:
          type: integer
          description: Shows the mobile network connection strength of the IQ.
          format: int32
          nullable: true
        revision:
          type: string
          description: Iq version
          nullable: true
      additionalProperties: false
    IqResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IqResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    IqSecretResponse:
      type: object
      properties:
        secret:
          type: string
          nullable: true
      additionalProperties: false
    IqState:
      enum:
        - factory
        - initialized
        - installation
        - active
        - dead
      type: string
    IqSummaryResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the IQ
          format: uuid
        customer_reference:
          type: string
          description: Name of the IQ
          nullable: true
      additionalProperties: false
    KeyType:
      enum:
        - tag
        - mkey
        - pin
        - wallet
        - unknown
      type: string
    LockAction:
      enum:
        - open
        - lock
      type: string
    LockActionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/LockAction'
      additionalProperties: false
      description: Request to perform action over lock
    LockerAssignmentResponse:
      type: object
      properties:
        id:
          type: string
          description: Locker Id
          format: uuid
        customer_reference:
          type: string
          description: Locker Customer Reference
          nullable: true
        locker_group_id:
          type: string
          description: Locker Group Customer Reference
          format: uuid
          nullable: true
        locker_group_customer_reference:
          type: string
          description: Locker Group Customer Reference
          nullable: true
        access_group_id:
          type: string
          description: Assignment Access Group Id
          format: uuid
          nullable: true
        locker_state:
          $ref: '#/components/schemas/LockingState'
        is_online:
          type: boolean
          description: Online status of the locker
        users_count:
          type: integer
          description: Users in assignment
          format: int32
        sync_state:
          $ref: '#/components/schemas/SyncState'
        mode:
          $ref: '#/components/schemas/LockMode'
      additionalProperties: false
    LockerAssignmentResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LockerAssignmentResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LockerGroupResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the locker group
          format: uuid
        customer_reference:
          type: string
          description: Customer Reference of the locker group
          nullable: true
      additionalProperties: false
      description: Locker group info
    LockerResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the locker
          format: uuid
        customer_reference:
          type: string
          description: Customer Reference of the locker
          nullable: true
        lock_group:
          $ref: '#/components/schemas/LockerGroupResponse'
        state:
          $ref: '#/components/schemas/LockingState'
        is_online:
          type: boolean
          description: Online status of the locker
        sync_state:
          $ref: '#/components/schemas/SyncState'
        mode:
          $ref: '#/components/schemas/LockMode'
      additionalProperties: false
      description: Locker information
    LockerResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LockerResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LockingRequest:
      required:
        - locked_state
      type: object
      properties:
        locked_state:
          $ref: '#/components/schemas/RequestLockStates'
        otp:
          type: string
          description: A valid otp
          nullable: true
      additionalProperties: false
    LockingState:
      enum:
        - open
        - locked
        - closed
      type: string
    LockMode:
      enum:
        - generic
        - dynamic_locker
        - free_locker
      type: string
    LockResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the lock
          format: uuid
        customer_reference:
          type: string
          description: Name of the lock
          nullable: true
        mac:
          type: string
          description: The mac address of the lock
          nullable: true
        floor:
          $ref: '#/components/schemas/FloorSummaryResponse'
        locked_state:
          $ref: '#/components/schemas/LockState'
        lock_type:
          $ref: '#/components/schemas/LockType'
        online:
          type: boolean
          description: Indicates if the lock is connected to the iq
        iq_link_state:
          $ref: '#/components/schemas/IqLinkState'
        tag_registration_state:
          $ref: '#/components/schemas/TagRegistrationState'
        battery_level:
          $ref: '#/components/schemas/BatteryStates'
        left_open_alarm:
          type: boolean
          description: Indicates if the door is left open. Applicable for escutcheons with a DLO feature.
        intrusion_alarm:
          type: boolean
          description: Indicates if an intrusion alarm is active.
        easy_office_mode_schedule:
          $ref: '#/components/schemas/EasyOfficeModeScheduleResponse'
        iq:
          $ref: '#/components/schemas/IqExtendedSummaryResponse'
        repeater:
          $ref: '#/components/schemas/RepeaterSummaryResponse'
        privacy_mode:
          type: boolean
          description: Indicates if locks privacy mode is enabled
        communication_type:
          $ref: '#/components/schemas/HardwareCommunicationType'
      additionalProperties: false
    LockResponseExtended:
      type: object
      properties:
        offline_access_keys_limit:
          type: integer
          description: "Limit for number of keys that can have guaranteed offline access\r\nDepends on lock type and communication type"
          format: int32
        offline_access_keys_count:
          type: integer
          description: Number of keys that were set to have guaranteed offline access to this lock
          format: int32
        id:
          type: string
          description: id of the lock
          format: uuid
        customer_reference:
          type: string
          description: Name of the lock
          nullable: true
        mac:
          type: string
          description: The mac address of the lock
          nullable: true
        floor:
          $ref: '#/components/schemas/FloorSummaryResponse'
        locked_state:
          $ref: '#/components/schemas/LockState'
        lock_type:
          $ref: '#/components/schemas/LockType'
        online:
          type: boolean
          description: Indicates if the lock is connected to the iq
        iq_link_state:
          $ref: '#/components/schemas/IqLinkState'
        tag_registration_state:
          $ref: '#/components/schemas/TagRegistrationState'
        battery_level:
          $ref: '#/components/schemas/BatteryStates'
        left_open_alarm:
          type: boolean
          description: Indicates if the door is left open. Applicable for escutcheons with a DLO feature.
        intrusion_alarm:
          type: boolean
          description: Indicates if an intrusion alarm is active.
        easy_office_mode_schedule:
          $ref: '#/components/schemas/EasyOfficeModeScheduleResponse'
        iq:
          $ref: '#/components/schemas/IqExtendedSummaryResponse'
        repeater:
          $ref: '#/components/schemas/RepeaterSummaryResponse'
        privacy_mode:
          type: boolean
          description: Indicates if locks privacy mode is enabled
        communication_type:
          $ref: '#/components/schemas/HardwareCommunicationType'
      additionalProperties: false
    LockResponseExtendedPagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LockResponseExtended'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LockResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LockResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LockSettingsResponse:
      type: object
      properties:
        open_time:
          type: integer
          description: Time in seconds when lock will remain open after open event
          format: int32
        offline_access_by_audit_trail_day_count:
          type: integer
          description: Time in days of a valid Audit Trial for Offline Access
          format: int32
        wall_reader_near_detection_opening:
          type: boolean
          description: Near Mode off or on for wall readers
      additionalProperties: false
      description: Lock Settings
    LockState:
      enum:
        - none
        - locked
        - office_mode
        - uncertain
        - locked_pending
        - office_mode_pending
      type: string
    LockSummaryResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the lock
          format: uuid
        customer_reference:
          type: string
          description: Name of the lock
          nullable: true
      additionalProperties: false
    LockSummaryResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/LockSummaryResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    LockType:
      enum:
        - none
        - unknown
        - escutcheon
        - cylinder
        - wall_reader
        - locker_lock
        - escutcheon_pin
        - wall_reader_pin
      type: string
    ManagedSiteResponse:
      type: object
      properties:
        active_user_amount:
          type: integer
          description: Shows the number of active users for the site
          format: int32
        active_iq_amount:
          type: integer
          description: Shows the number of active iqs for the site.
          format: int32
        pin_enabled:
          type: boolean
          description: Shows whether the site is pin enabled.
        id:
          type: string
          description: The id of the site
          format: uuid
        customer_reference:
          type: string
          description: The name of the site
          nullable: true
        subscribed_user_amount:
          type: integer
          description: "Shows the number of users allowed by the site's subscription\r\n(this is not the number of actually subscribed users).\r\n0 means, that no users are allowed by subscription / there is no valid subscription.\r\nnull means unlimited number of users allowed."
          format: int32
          nullable: true
        subscription_valid:
          type: boolean
          description: Subscription state of the site
        country_code:
          type: string
          description: The country of the site
          nullable: true
        site_uid:
          type: string
          description: The uid of the site
          nullable: true
        time_zone:
          type: string
          description: The time zone the site is in
          nullable: true
        owner:
          $ref: '#/components/schemas/UserSummaryResponse'
        installation_state:
          $ref: '#/components/schemas/InstallationState'
        mkey_compatible:
          type: boolean
          description: Indicates whether site is mobile key compatible
      additionalProperties: false
    MeResponse:
      type: object
      properties:
        id:
          type: string
          description: User id
          format: uuid
        first_name:
          type: string
          description: Firstname of the user
          nullable: true
        last_name:
          type: string
          description: Surname of the user
          nullable: true
        phone:
          type: string
          description: Phone number of the user
          nullable: true
        email:
          type: string
          description: Email address of the user
          nullable: true
        language:
          type: string
          description: The UI language chosen by the user
          nullable: true
        tag_number:
          type: string
          description: User tag number
          nullable: true
        image_url:
          type: string
          description: The url of the profile picture
          nullable: true
      additionalProperties: false
      description: Contains details of currently logged in user
    MKeyDetailsResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the relation between the user and the digital key
          format: uuid
        key_id:
          type: string
          description: The id of the digital key
          format: uuid
        expiry_date:
          type: string
          description: The expiry date of the key
          format: date-time
          nullable: true
        registration_date:
          type: string
          description: The registration date of the key
          format: date-time
      additionalProperties: false
      description: Details of a Digital Key
    MKeyResponse:
      type: object
      properties:
        mkey_data:
          type: string
          description: The digital key data of the activated device
          nullable: true
      additionalProperties: false
      description: Digital key response
    OccupyLockerRequest:
      type: object
      properties:
        lock_id:
          type: string
          format: uuid
      additionalProperties: false
    PatchAccessGroupLocksRequest:
      type: object
      properties:
        add_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of locks to be added to an access group
          nullable: true
        remove_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of locks to be deleted from an access group
          nullable: true
      additionalProperties: false
    PatchAccessGroupRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: Name of the access group. Must be not-empty if provided
          nullable: true
      additionalProperties: false
    PatchAccessGroupUsersRequest:
      type: object
      properties:
        add_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of users to be added to an access group
          nullable: true
        remove_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of users to be deleted from an access group
          nullable: true
      additionalProperties: false
    PatchEntryMessageRuleRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the Entry Message Rule by the client. If provided must be not-empty
          nullable: true
        rule_type:
          $ref: '#/components/schemas/RuleType'
        send_mail:
          type: boolean
          description: Setting to receive a mail on the entry
        send_sms:
          type: boolean
          description: Setting to receive a sms on the entry
        send_push:
          type: boolean
          description: Setting to receive a push message on the entry
        on_inside_handle:
          type: boolean
          description: Setting to receive a message on an inside handle entry
      additionalProperties: false
    PatchFloorRequest:
      type: object
      properties:
        number:
          type: integer
          description: Floor Number
          format: int32
          nullable: true
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the floor by the client
          nullable: true
        locks_to_add:
          type: array
          items:
            type: string
            format: uuid
          description: List of Lock ids to be added to the Floor
          nullable: true
        locks_to_remove:
          type: array
          items:
            type: string
            format: uuid
          description: List of Lock ids to be removed from the Floor
          nullable: true
      additionalProperties: false
    PatchIncidentMessageRuleRequest:
      type: object
      properties:
        send_mail:
          type: boolean
          description: Setting to receive a mail on the incident
        send_sms:
          type: boolean
          description: Setting to receive a sms on the incident
        send_push:
          type: boolean
          description: Setting to receive a push message on the incident
      additionalProperties: false
    PatchInstallerAccessIqRequest:
      required:
        - otp
      type: object
      properties:
        otp:
          type: string
          description: A valid otp
        enable:
          type: boolean
          description: Enable / disable installer access for IQ
      additionalProperties: false
    PatchIqRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the IQ by the client. Must be not-empty if provided
          nullable: true
        time_zone:
          type: string
          description: Timezone of the IQ. Must be not-empty if provided
          nullable: true
        led_enabled:
          type: boolean
          description: If the IQ LED heartbeat should be turned on or off
          nullable: true
      additionalProperties: false
    PatchKeyRequest:
      type: object
      properties:
        blocked:
          type: boolean
          description: Blocks the access of the key
          nullable: true
        offline_access:
          type: boolean
          description: Sets offline access for the key
          nullable: true
      additionalProperties: false
    PatchLockerRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: New customer reference of the lock
          nullable: true
        mode:
          $ref: '#/components/schemas/LockMode'
      additionalProperties: false
      description: Request object to update the lock
    PatchLockOfflineAccessRequest:
      type: object
      properties:
        add_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of to be added relations to offline access keys/locks
          nullable: true
        remove_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of to be deleted relations to offline access keys/locks
          nullable: true
      additionalProperties: false
    PatchLockRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: The new name of the lock. Must be not-empty if provided
          nullable: true
        floor_id:
          type: string
          description: Id of the floor to link to the lock
          format: uuid
          nullable: true
      additionalProperties: false
    PatchMessageRuleRelationRequest:
      type: object
      properties:
        add_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of to be added relations to message rule
          nullable: true
        remove_ids:
          type: array
          items:
            type: string
            format: uuid
          description: Represents a list of to be deleted relations from message rule
          nullable: true
      additionalProperties: false
      description: A request to remove/add relations from message rule
    PatchPodGuestRequest:
      type: object
      properties:
        access_rule:
          $ref: '#/components/schemas/PodGuestAccessRuleRequest'
      additionalProperties: false
    PatchPodGuestsRequest:
      type: object
      properties:
        add_guests:
          type: array
          items:
            $ref: '#/components/schemas/PostPodGuestRequest'
          description: "List of Guests to be added to the Pod.\r\nIf a user exists in the system by email, they will be added to the site.\r\nIf a user does not exist in the system by email, they will be invited."
          nullable: true
        remove_guests_ids:
          type: array
          items:
            type: string
            format: uuid
          description: "List of Guest to be removed from the Pod.\r\nIf no Guest exists in the Pod by id, id will be ignored.\r\nThis Id is PodGuest.Id"
          nullable: true
      additionalProperties: false
      description: Request to add/remove guests to/from a Pod
    PatchPodLocksRequest:
      type: object
      properties:
        lock_to_add_ids:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        lock_to_remove_ids:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
      additionalProperties: false
    PatchPodMembersRequest:
      type: object
      properties:
        add_members:
          type: array
          items:
            $ref: '#/components/schemas/PostPodMemberRequest'
          description: "List of Members to be added to the Pod.\r\nIf a user exists in the system by email, they will be added to the site.\r\nIf a user does not exist in the system by email, they will be invited."
          nullable: true
        remove_member_ids:
          type: array
          items:
            type: string
            format: uuid
          description: "List of Member ids to be removed from the Pod.\r\nIf no Member exists in the Pod by id, id will be ignored.\r\nThis id is the same as SiteUser id of the Member (but not the same as User id of the Member)."
          nullable: true
      additionalProperties: false
      description: Request to add/remove Members to/from a Pod
    PatchPodRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: the name of the Pod.Must be not-empty if provided
          nullable: true
        max_guest_amount:
          type: integer
          description: maximum number of guests that can be invited to the Pod
          format: int32
          nullable: true
      additionalProperties: false
      description: request to update existing Pod
    PatchRepeaterRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the Repeater
          nullable: true
      additionalProperties: false
    PatchSiteRequest:
      type: object
      properties:
        customer_reference:
          type: string
          description: The name of the site
          nullable: true
        owner_id:
          type: string
          description: Swap the owner rights with another admin in the site
          format: uuid
        country_code:
          type: string
          description: The country where the site is located
          nullable: true
        time_zone:
          type: string
          description: The time zone the site is in
          nullable: true
      additionalProperties: false
      description: Request to update the site
    PatchSiteUserRequest:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user, only editable if it has no profile. Must be not-empty if provided
          nullable: true
        last_name:
          type: string
          description: The last name of the user, only editable if it has no profile. Must be not-empty if provided
          nullable: true
        email:
          type: string
          description: The email of the user, only editable if it has no profile. This will result in an invite to create a profile.
          nullable: true
        role_ids:
          type: array
          items:
            type: string
            format: uuid
          description: The roles assigned to the user
          nullable: true
        alias:
          type: string
          description: The alias label for the site user
          nullable: true
        tag_id:
          type: string
          description: Tag Id of the user
          format: uuid
          nullable: true
        toggle_easy_office_mode:
          type: boolean
          description: Indicates if the user can toggle easy office mode
        toggle_manual_office_mode:
          type: boolean
          description: Indicates if the user can toggle manual office mode
        blocked:
          type: boolean
          description: Indicates if the user is blocked in this site
        override_privacy_mode:
          type: boolean
          description: Indicates if the user can override privacy mode in this site, false by default
        use_pin:
          type: boolean
          description: Indicates if the user is able to use pin in this site
      additionalProperties: false
    PatchSiteUserSubscriptionRequest:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/UserSubscriptionState'
      additionalProperties: false
    PatchTimeScheduleRequest:
      type: object
      properties:
        monday:
          type: boolean
          description: Whether this timeschedule is valid on a Monday between start and end datetimes
          example: true
        tuesday:
          type: boolean
          description: Whether this timeschedule is valid on a Tuesday between start and end datetimes
          example: true
        wednesday:
          type: boolean
          description: Whether this timeschedule is valid on a Wednesday between start and end datetimes
          example: true
        thursday:
          type: boolean
          description: Whether this timeschedule is valid on a Thursday between start and end datetimes
          example: true
        friday:
          type: boolean
          description: Whether this timeschedule is valid on a Friday between start and end datetimes
          example: true
        saturday:
          type: boolean
          description: Whether this timeschedule is valid on a Saturday between start and end datetimes
          example: true
        sunday:
          type: boolean
          description: Whether this timeschedule is valid on a Sunday between start and end datetimes
          example: true
        start_time:
          type: string
          description: The start of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: The end of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: The date at which the timeschedule starts beeing valid
          format: date-time
          nullable: true
          example: 01-01-2016T14:51:15.426Z
        end_date:
          type: string
          description: The date at which the timeschedule stops being valid
          format: date-time
          nullable: true
          example: 31-12-2016T14:51:15.426Z
      additionalProperties: false
    PodAccessCodeResponse:
      type: object
      properties:
        code:
          type: string
          description: Generated access code
          nullable: true
        id:
          type: string
          description: Access code id
          format: uuid
        code_created_date:
          type: string
          description: Access code created date
          format: date-time
        code_expiry_date:
          type: string
          description: Access code valid Until
          format: date-time
        use_limit:
          type: integer
          description: Usage limit for the access code
          format: int32
        state:
          $ref: '#/components/schemas/PodAccessCodeState'
      additionalProperties: false
    PodAccessCodeState:
      enum:
        - active
        - revoked
      type: string
    PodAccessCodeWithOwnerResponse:
      type: object
      properties:
        generated_by:
          $ref: '#/components/schemas/UserWithEmailShortResponse'
        id:
          type: string
          description: Access code id
          format: uuid
        code_created_date:
          type: string
          description: Access code created date
          format: date-time
        code_expiry_date:
          type: string
          description: Access code valid Until
          format: date-time
        use_limit:
          type: integer
          description: Usage limit for the access code
          format: int32
        state:
          $ref: '#/components/schemas/PodAccessCodeState'
      additionalProperties: false
    PodAccessCodeWithOwnerResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PodAccessCodeWithOwnerResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    PodAccessRuleRequest:
      type: object
      properties:
        access_rule_type:
          $ref: '#/components/schemas/PodAccessRuleType'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/PodAccessRuleScheduleRequest'
          description: "List of timetables of accessibility for selected locks\r\nAt least one should be specified if access_rule_type = checkin_checkout.\r\nNone can be specified when always"
          nullable: true
      additionalProperties: false
      description: Request to create or update Pod's Access Rule
    PodAccessRuleResponse:
      type: object
      properties:
        access_rule_type:
          $ref: '#/components/schemas/PodAccessRuleType'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/BaseTimeScheduleResponse'
          description: Schedules of the access rule.
          nullable: true
      additionalProperties: false
      description: Access Rule of the pod
    PodAccessRuleScheduleRequest:
      required:
        - end_time
        - start_time
      type: object
      properties:
        monday:
          type: boolean
          description: Whether this timeschedule is valid on a Monday between start and end datetimes
          example: true
        tuesday:
          type: boolean
          description: Whether this timeschedule is valid on a Tuesday between start and end datetimes
          example: true
        wednesday:
          type: boolean
          description: Whether this timeschedule is valid on a Wednesday between start and end datetimes
          example: true
        thursday:
          type: boolean
          description: Whether this timeschedule is valid on a Thursday between start and end datetimes
          example: true
        friday:
          type: boolean
          description: Whether this timeschedule is valid on a Friday between start and end datetimes
          example: true
        saturday:
          type: boolean
          description: Whether this timeschedule is valid on a Saturday between start and end datetimes
          example: true
        sunday:
          type: boolean
          description: Whether this timeschedule is valid on a Sunday between start and end datetimes
          example: true
        start_time:
          type: string
          description: The start of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: The end of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: The date at which the timeschedule starts beeing valid
          format: date-time
          nullable: true
          example: 01-01-2016T14:51:15.426Z
        end_date:
          type: string
          description: The date at which the timeschedule stops being valid
          format: date-time
          nullable: true
          example: 31-12-2016T14:51:15.426Z
      additionalProperties: false
    PodAccessRuleType:
      enum:
        - always
        - custom
        - checkin_checkout
      type: string
    PodGuestAccessRuleRequest:
      type: object
      properties:
        locks:
          type: array
          items:
            type: string
            format: uuid
          description: "List of locks to be accessible through this access rule.\r\nAt least one should be specified if access_rule_type = custom.\r\nNone can be specified when always"
          nullable: true
        access_rule_type:
          $ref: '#/components/schemas/PodAccessRuleType'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/PodAccessRuleScheduleRequest'
          description: "List of timetables of accessibility for selected locks\r\nAt least one should be specified if access_rule_type = custom.\r\nNone can be specified when always"
          nullable: true
      additionalProperties: false
      description: Request to setup access rule for specific pod guest
    PodGuestAccessRuleResponse:
      type: object
      properties:
        access_rule_type:
          $ref: '#/components/schemas/PodAccessRuleType'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/BaseTimeScheduleResponse'
          description: Schedules of the access rule of the pod guest.
          nullable: true
        locks:
          type: array
          items:
            type: string
            format: uuid
          description: Locks of the access rule of the pod guest
          nullable: true
      additionalProperties: false
      description: Access Rule of a Pod Guest
    PodGuestResponse:
      type: object
      properties:
        first_name:
          type: string
          description: User's First Name
          nullable: true
        last_name:
          type: string
          description: User's Last Name
          nullable: true
        email:
          type: string
          description: User's Email
          nullable: true
        tag_number:
          type: string
          description: Tag number
          nullable: true
        access_rule:
          $ref: '#/components/schemas/PodGuestAccessRuleResponse'
      additionalProperties: false
    PodLockResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the lock
          format: uuid
        customer_reference:
          type: string
          description: Name of the lock
          nullable: true
      additionalProperties: false
    PodLockResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PodLockResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    PodUserResponse:
      type: object
      properties:
        pod_user_type:
          $ref: '#/components/schemas/PodUserType'
        site_user_id:
          type: string
          description: Id of the Pod user (unique among PodMembers and PodGuests)
          format: uuid
        id:
          type: string
          description: The id of the site user
          format: uuid
        user:
          $ref: '#/components/schemas/UserSummaryResponse'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
          description: The roles assigned to the user
          nullable: true
        alias:
          type: string
          description: The alias label for the site user
          nullable: true
        toggle_easy_office_mode:
          type: boolean
          description: Indicates if the user can toggle easy office mode
        toggle_manual_office_mode:
          type: boolean
          description: Indicates if the user can toggle manual office mode
        remote_access:
          type: boolean
          description: Indicates if the user can execute remote openings
        blocked:
          type: boolean
          description: Indicates if the user is blocked in this site (all tags and remote openings)
        tag_owned_by_this_site:
          type: boolean
          description: Indicates if the users tag is owned by this site
        subscription_state:
          $ref: '#/components/schemas/UserSubscriptionState'
        override_privacy_mode:
          type: boolean
          description: Indicates if the user can override privacy mode in this site, false by default
        use_pin:
          type: boolean
          description: Indicates if the user is able to use pin in this site
      additionalProperties: false
    PodUserResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PodUserResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    PodUserType:
      enum:
        - member
        - guest
      type: string
    PodWithAccessRuleResponse:
      type: object
      properties:
        access_rule:
          $ref: '#/components/schemas/PodAccessRuleResponse'
        id:
          type: string
          description: Pod id
          format: uuid
        customer_reference:
          type: string
          description: the name of the Pod
          nullable: true
        max_guest_amount:
          type: integer
          description: maximum number of guests that can be invited to the Pod
          format: int32
        member_amount:
          type: integer
          description: amount of members in the Pod
          format: int32
        guest_amount:
          type: integer
          description: amount of guests in the Pod
          format: int32
        lock_amount:
          type: integer
          description: amount of locks in the Pod
          format: int32
      additionalProperties: false
      description: Pod with Access Rule Response
    PodWithAccessRuleResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PodWithAccessRuleResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    PostAccessGroupLockRequest:
      required:
        - lock_id
      type: object
      properties:
        lock_id:
          type: string
          description: The id of the lock
          format: uuid
      additionalProperties: false
    PostAccessGroupRequest:
      required:
        - customer_reference
      type: object
      properties:
        customer_reference:
          type: string
          description: Name of the access group
      additionalProperties: false
    PostAccessGroupTimeScheduleRequest:
      required:
        - end_time
        - start_time
      type: object
      properties:
        monday:
          type: boolean
          description: Whether this timeschedule is valid on a Monday between start and end datetimes
          example: true
        tuesday:
          type: boolean
          description: Whether this timeschedule is valid on a Tuesday between start and end datetimes
          example: true
        wednesday:
          type: boolean
          description: Whether this timeschedule is valid on a Wednesday between start and end datetimes
          example: true
        thursday:
          type: boolean
          description: Whether this timeschedule is valid on a Thursday between start and end datetimes
          example: true
        friday:
          type: boolean
          description: Whether this timeschedule is valid on a Friday between start and end datetimes
          example: true
        saturday:
          type: boolean
          description: Whether this timeschedule is valid on a Saturday between start and end datetimes
          example: true
        sunday:
          type: boolean
          description: Whether this timeschedule is valid on a Sunday between start and end datetimes
          example: true
        start_time:
          type: string
          description: The start of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: The end of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: The date at which the timeschedule starts beeing valid
          format: date-time
          nullable: true
          example: 01-01-2016T14:51:15.426Z
        end_date:
          type: string
          description: The date at which the timeschedule stops being valid
          format: date-time
          nullable: true
          example: 31-12-2016T14:51:15.426Z
      additionalProperties: false
    PostAccessGroupUserRequest:
      required:
        - user_id
      type: object
      properties:
        user_id:
          type: string
          description: The id of the user
          format: uuid
      additionalProperties: false
    PostEntryMessageRuleRequest:
      required:
        - customer_reference
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the Access Group by the client
        type:
          $ref: '#/components/schemas/RuleType'
        mail:
          type: boolean
          description: Setting to receive a mail on the entry
        sms:
          type: boolean
          description: Setting to receive a sms on the entry
        push:
          type: boolean
          description: Setting to receive a push message on the entry
        inside_handle:
          type: boolean
          description: Setting to receive a message on an inside handle entry
      additionalProperties: false
    PostEntryMessageRuleTimeScheduleRequest:
      required:
        - end_time
        - start_time
      type: object
      properties:
        monday:
          type: boolean
          description: Whether this timeschedule is valid on a Monday between start and end datetimes
          example: true
        tuesday:
          type: boolean
          description: Whether this timeschedule is valid on a Tuesday between start and end datetimes
          example: true
        wednesday:
          type: boolean
          description: Whether this timeschedule is valid on a Wednesday between start and end datetimes
          example: true
        thursday:
          type: boolean
          description: Whether this timeschedule is valid on a Thursday between start and end datetimes
          example: true
        friday:
          type: boolean
          description: Whether this timeschedule is valid on a Friday between start and end datetimes
          example: true
        saturday:
          type: boolean
          description: Whether this timeschedule is valid on a Saturday between start and end datetimes
          example: true
        sunday:
          type: boolean
          description: Whether this timeschedule is valid on a Sunday between start and end datetimes
          example: true
        start_time:
          type: string
          description: The start of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: The end of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: The date at which the timeschedule starts beeing valid
          format: date-time
          nullable: true
          example: 01-01-2016T14:51:15.426Z
        end_date:
          type: string
          description: The date at which the timeschedule stops being valid
          format: date-time
          nullable: true
          example: 31-12-2016T14:51:15.426Z
      additionalProperties: false
    PostExistingSiteUserRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Id of the user
          format: uuid
        role_ids:
          type: array
          items:
            type: string
            format: uuid
          description: The roles assigned to the user. Must contain at least one hierarchical role
          nullable: true
        alias:
          type: string
          description: The alias label for the site user
          nullable: true
        toggle_easy_office_mode:
          type: boolean
          description: Indicates if the user can toggle easy office mode
        toggle_manual_office_mode:
          type: boolean
          description: Indicates if the user can toggle manual office mode
        blocked:
          type: boolean
          description: Indicates if the user is blocked in this site
        override_privacy_mode:
          type: boolean
          description: Indicates if user can override privacy mode in this site, false by default
        use_pin:
          type: boolean
          description: Indicates if the user is able to use pin in this site
      additionalProperties: false
    PostFloorRequest:
      required:
        - customer_reference
        - number
      type: object
      properties:
        number:
          type: integer
          description: Floor Number
          format: int32
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the floor by the client
        locks:
          type: array
          items:
            type: string
            format: uuid
          description: List of Lock ids to be added to the Floor
          nullable: true
      additionalProperties: false
    PostIqRequest:
      required:
        - activation_code
        - customer_reference
        - time_zone
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the IQ by the client
        time_zone:
          type: string
          description: The time zone of the IQ
        activation_code:
          type: string
          description: The activation code written on the IQ
      additionalProperties: false
    PostNewSiteUserDeviceRequest:
      required:
        - device_uid
        - public_key
      type: object
      properties:
        device_name:
          type: string
          description: The human readable device name.
          nullable: true
        device_uid:
          type: string
          description: The unique identifier of the device.
        public_key:
          type: string
          description: The public key generated on the device.
      additionalProperties: false
      description: Request to create a new User Device
    PostNewSiteUserRequest:
      required:
        - first_name
        - last_name
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user, only editable if it has no profile.
        last_name:
          type: string
          description: The last name of the user, only editable if it has no profile.
        email:
          type: string
          description: The email of the user, only editable if it has no profile. This will result in an invite to create a profile.
          nullable: true
        tag_id:
          type: string
          description: Tag Id of the user
          format: uuid
          nullable: true
        role_ids:
          type: array
          items:
            type: string
            format: uuid
          description: The roles assigned to the user. Must contain at least one hierarchical role
          nullable: true
        alias:
          type: string
          description: The alias label for the site user
          nullable: true
        toggle_easy_office_mode:
          type: boolean
          description: Indicates if the user can toggle easy office mode
        toggle_manual_office_mode:
          type: boolean
          description: Indicates if the user can toggle manual office mode
        blocked:
          type: boolean
          description: Indicates if the user is blocked in this site
        override_privacy_mode:
          type: boolean
          description: Indicates if user can override privacy mode in this site, false by default
        use_pin:
          type: boolean
          description: Indicates if the user is able to use pin in this site
      additionalProperties: false
    PostPodGuestByAccessCodeRequest:
      required:
        - first_name
        - last_name
      type: object
      properties:
        first_name:
          type: string
          description: Guest's First Name
        last_name:
          type: string
          description: Guest's Last Name
      additionalProperties: false
      description: Request to Add an anonymous Guest to the Pod by using an Access Code
    PostPodGuestRequest:
      required:
        - first_name
        - last_name
      type: object
      properties:
        access_rule:
          $ref: '#/components/schemas/PodGuestAccessRuleRequest'
        first_name:
          type: string
          description: User's First Name
        last_name:
          type: string
          description: User's Last Name
        email:
          type: string
          description: User's Email
          nullable: true
      additionalProperties: false
      description: Request to Add a Guest to the Pod
    PostPodMemberRequest:
      required:
        - first_name
        - last_name
      type: object
      properties:
        tag_id:
          type: string
          description: Tag assigned to the User
          format: uuid
          nullable: true
        first_name:
          type: string
          description: User's First Name
        last_name:
          type: string
          description: User's Last Name
        email:
          type: string
          description: User's Email
          nullable: true
      additionalProperties: false
      description: Request to Add a Member to the Pod
    PostPodRequest:
      required:
        - customer_reference
        - max_guest_amount
      type: object
      properties:
        customer_reference:
          type: string
          description: the name of the Pod
        max_guest_amount:
          type: integer
          description: maximum number of guests that can be invited to the Pod
          format: int32
        locks:
          type: array
          items:
            type: string
            format: uuid
          description: List of Lock ids to be added to the Pod
          nullable: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/PostPodMemberRequest'
          description: "List of Members to add to the Pod\r\nIf a user exists in the system by email, they will be added to the site.\r\nIf a user does not exist in the system by email, they will be invited"
          nullable: true
        access_rule:
          $ref: '#/components/schemas/PodAccessRuleRequest'
      additionalProperties: false
      description: request to create a new Pod
    PostRepeaterRequest:
      required:
        - activation_code
        - customer_reference
      type: object
      properties:
        customer_reference:
          type: string
          description: The name or any sort of reference that can be used to identify the Repeater by the client
        activation_code:
          type: string
          description: The activation code written on the physical repeater
      additionalProperties: false
      description: Request to add and activate a repeater
    PostSiteRequest:
      required:
        - country_code
        - customer_reference
        - time_zone
      type: object
      properties:
        customer_reference:
          type: string
          description: The name of the site
        country_code:
          type: string
          description: The country where the site is located
        time_zone:
          type: string
          description: The time zone the site is in
      additionalProperties: false
    PutAssignmentRequest:
      type: object
      properties:
        lock_id:
          type: string
          description: Id of the lock
          format: uuid
        user_ids:
          type: array
          items:
            type: string
            format: uuid
          description: List of the users that should be present in locker assignment
          nullable: true
      additionalProperties: false
    PutEomScheduleRequest:
      required:
        - end_time
        - start_time
      type: object
      properties:
        monday:
          type: boolean
          description: Whether this timeschedule is valid on a Monday between start and end datetimes
          example: true
        tuesday:
          type: boolean
          description: Whether this timeschedule is valid on a Tuesday between start and end datetimes
          example: true
        wednesday:
          type: boolean
          description: Whether this timeschedule is valid on a Wednesday between start and end datetimes
          example: true
        thursday:
          type: boolean
          description: Whether this timeschedule is valid on a Thursday between start and end datetimes
          example: true
        friday:
          type: boolean
          description: Whether this timeschedule is valid on a Friday between start and end datetimes
          example: true
        saturday:
          type: boolean
          description: Whether this timeschedule is valid on a Saturday between start and end datetimes
          example: true
        sunday:
          type: boolean
          description: Whether this timeschedule is valid on a Sunday between start and end datetimes
          example: true
        start_time:
          type: string
          description: The start of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '10:00'
        end_time:
          type: string
          description: The end of the time span on which this timeschedule is valid, for the selected days and date span.
          format: date-span
          example: '17:00'
        start_date:
          type: string
          description: The date at which the timeschedule starts beeing valid
          format: date-time
          nullable: true
          example: 01-01-2016T14:51:15.426Z
        end_date:
          type: string
          description: The date at which the timeschedule stops being valid
          format: date-time
          nullable: true
          example: 31-12-2016T14:51:15.426Z
      additionalProperties: false
    PutInstallerAccessRequest:
      required:
        - action
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionType'
        update_default_installer:
          type: boolean
          description: Wether or not to update the default installer via this access
      additionalProperties: false
    PutIqTreeRequest:
      required:
        - otp
      type: object
      properties:
        otp:
          type: string
          description: The OTP necessary for inserting new iq tree
        iq_tree_items:
          type: array
          items:
            $ref: '#/components/schemas/TreeItemSummary'
          description: Represents list of tree items
          nullable: true
      additionalProperties: false
    PutLockSettingsRequest:
      required:
        - offline_access_by_audit_trail_day_count
        - open_time
      type: object
      properties:
        open_time:
          type: integer
          description: Time in seconds (between 1 and 240 seconds) when lock will remain open after open event
          format: int32
        offline_access_by_audit_trail_day_count:
          type: integer
          description: Time in days ( between 0 and 255 days) of a valid Audit Trial for Offline Access
          format: int32
        wall_reader_near_detection_opening:
          type: boolean
          description: Near Mode off or on for wall readers
      additionalProperties: false
    PutPinRequest:
      required:
        - delta
        - otp
      type: object
      properties:
        otp:
          type: string
          description: A valid OTP generated with the current pin
        delta:
          type: string
          description: The delta from old pin to the new pin
      additionalProperties: false
    PutPodAccessCodeRequest:
      type: object
      properties:
        code_expiry_date:
          type: string
          description: "The date that the access code will be expired.\r\nShould be within the next 24 hours.\r\nOptional property. If not provided, default value is 24 hours from now"
          format: date-time
          nullable: true
          example: 01-01-2016T14:51:15.426Z
        use_limit:
          type: integer
          description: "Maximum usage number for the access code.\r\nUse limit should be greater than zero.\r\nOptional property. If not provided, use limit will be set as remaining pod guest count."
          format: int32
          nullable: true
          example: 1
      additionalProperties: false
    PutSiteUserDeviceCertificateRequest:
      required:
        - public_key
      type: object
      properties:
        public_key:
          type: string
          description: The public key generated on the device.
      additionalProperties: false
      description: Request to replace device's certificate
    PutSiteUserPinRequest:
      type: object
      properties:
        expiry_date:
          type: string
          description: "Sets expiry date for this accessor pin. Allowed values are from 1 day to 1 year.\r\nIf a pin must never expire please leave ExpiryDate empty"
          format: date-time
          nullable: true
      additionalProperties: false
    RedeemVoucherRequest:
      required:
        - voucher_code
      type: object
      properties:
        voucher_code:
          type: string
          description: 'Code of the voucher: an alphanumeric value of 12 characters'
      additionalProperties: false
    RepeaterResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the repeater
          format: uuid
        customer_reference:
          type: string
          description: Name of the repeater
          nullable: true
        mac:
          type: string
          description: Mac address of the repeater
          nullable: true
        online:
          type: boolean
          description: Online state of the repeater
        iq_link_state:
          $ref: '#/components/schemas/IqLinkState'
        iq:
          $ref: '#/components/schemas/IqSummaryResponse'
        parent_repeater:
          $ref: '#/components/schemas/RepeaterSummaryResponse'
        communication_type:
          $ref: '#/components/schemas/HardwareCommunicationType'
      additionalProperties: false
    RepeaterResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RepeaterResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    RepeaterSummaryResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the repeater
          format: uuid
        customer_reference:
          type: string
          description: Name of the repeater
          nullable: true
      additionalProperties: false
    ReplaceIqRequest:
      required:
        - activation_code
      type: object
      properties:
        activation_code:
          type: string
          description: The activation code as written on the physical IQ
      additionalProperties: false
    RequestLockStates:
      enum:
        - none
        - locked
        - office_mode
        - uncertain
        - unlocked
      type: string
    RoleResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the role
          format: uuid
        customer_reference:
          type: string
          description: The name of the role
          nullable: true
        code:
          type: string
          description: The code of the role
          nullable: true
        parent_id:
          type: string
          description: The id of the parent role
          format: uuid
          nullable: true
        is_hierarchical:
          type: boolean
          description: Is role hierarchical
      additionalProperties: false
    RoleResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    RuleType:
      enum:
        - entered
        - rejected
      type: string
    SignalStrengthResponse:
      type: object
      properties:
        signal_strength:
          type: integer
          format: int32
      additionalProperties: false
    SiteResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the site
          format: uuid
        customer_reference:
          type: string
          description: The name of the site
          nullable: true
        subscribed_user_amount:
          type: integer
          description: "Shows the number of users allowed by the site's subscription\r\n(this is not the number of actually subscribed users).\r\n0 means, that no users are allowed by subscription / there is no valid subscription.\r\nnull means unlimited number of users allowed."
          format: int32
          nullable: true
        subscription_valid:
          type: boolean
          description: Subscription state of the site
        country_code:
          type: string
          description: The country of the site
          nullable: true
        site_uid:
          type: string
          description: The uid of the site
          nullable: true
        time_zone:
          type: string
          description: The time zone the site is in
          nullable: true
        owner:
          $ref: '#/components/schemas/UserSummaryResponse'
        installation_state:
          $ref: '#/components/schemas/InstallationState'
        mkey_compatible:
          type: boolean
          description: Indicates whether site is mobile key compatible
      additionalProperties: false
    SiteResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SiteResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    SiteTagResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the tag
          format: uuid
        blocked:
          type: boolean
          description: Indicates if this tag is blocked for this site
        creation_date:
          type: string
          description: Creation date of the tag
          format: date-time
        registration_date:
          type: string
          description: Registration date of the tag
          format: date-time
          nullable: true
        tag_number:
          type: string
          description: The number on the tag
          nullable: true
        source_iq_id:
          type: string
          description: Id of the IQ with the help of which this tag was registered for this site
          format: uuid
          nullable: true
        site_user_key_id:
          type: string
          description: The id of the link between the site user and this tag
          format: uuid
          nullable: true
        site_user:
          $ref: '#/components/schemas/SiteUserSummary'
        is_pod_tag:
          type: boolean
          description: Is owned by pod
      additionalProperties: false
      description: Tag within a Site
    SiteTagResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SiteTagResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    SiteUserDeviceResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the device
          format: uuid
        device_name:
          type: string
          description: Name of the device
          nullable: true
        device_uid:
          type: string
          description: Uid of the device
          nullable: true
        mkey:
          $ref: '#/components/schemas/MKeyDetailsResponse'
      additionalProperties: false
      description: Device belonging to a site user
    SiteUserDeviceResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SiteUserDeviceResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    SiteUserDeviceWithCertificateResponse:
      type: object
      properties:
        certificate:
          type: string
          description: The certificate of the activated device
          nullable: true
        id:
          type: string
          description: Id of the device
          format: uuid
        device_name:
          type: string
          description: Name of the device
          nullable: true
        device_uid:
          type: string
          description: Uid of the device
          nullable: true
        mkey:
          $ref: '#/components/schemas/MKeyDetailsResponse'
      additionalProperties: false
      description: Created Device belonging to a Site User
    SiteUserKeyResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the key (being the relation between the User and a Tag / Digital Key / Pin / Wallet)
          format: uuid
        key_identifier:
          type: string
          description: The name or number identifying the key.
          nullable: true
        key_id:
          type: string
          description: The id identifying the Tag / Digital Key / Pin / Wallet
          format: uuid
        type:
          $ref: '#/components/schemas/KeyType'
        expiry_date:
          type: string
          description: "The expiry date of the key.\r\nNull if there is no expiration date for the key"
          format: date-time
          nullable: true
        registration_date:
          type: string
          description: The registration date of the key
          format: date-time
        blocked:
          type: boolean
          description: If the key is blocked for this site
        offline_access:
          type: boolean
          description: "Depending on the context signifies either\r\na) whether the key has offline access for this site,\r\nor b) whether the key has offline access for a certain lock"
      additionalProperties: false
      description: Relationship between a SiteUser and a Tag / Digital Key / Pin
    SiteUserKeyResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SiteUserKeyResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    SiteUserResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the site user
          format: uuid
        user:
          $ref: '#/components/schemas/UserSummaryResponse'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
          description: The roles assigned to the user
          nullable: true
        alias:
          type: string
          description: The alias label for the site user
          nullable: true
        toggle_easy_office_mode:
          type: boolean
          description: Indicates if the user can toggle easy office mode
        toggle_manual_office_mode:
          type: boolean
          description: Indicates if the user can toggle manual office mode
        remote_access:
          type: boolean
          description: Indicates if the user can execute remote openings
        blocked:
          type: boolean
          description: Indicates if the user is blocked in this site (all tags and remote openings)
        tag_owned_by_this_site:
          type: boolean
          description: Indicates if the users tag is owned by this site
        subscription_state:
          $ref: '#/components/schemas/UserSubscriptionState'
        override_privacy_mode:
          type: boolean
          description: Indicates if the user can override privacy mode in this site, false by default
        use_pin:
          type: boolean
          description: Indicates if the user is able to use pin in this site
      additionalProperties: false
      description: Contains the site user details
    SiteUserResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SiteUserResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    SiteUserSummary:
      type: object
      properties:
        id:
          type: string
          description: The id of the site user
          format: uuid
        user:
          $ref: '#/components/schemas/UserShortSummary'
      additionalProperties: false
      description: Site User summary
    SubscriptionResponse:
      type: object
      properties:
        end_date:
          type: string
          description: End Date of subscription. Can be null if subsciption was created with unlimited month span
          format: date-time
          nullable: true
        user_amount:
          type: integer
          description: User Amount allowed for the subscription. Null if unlimited
          format: int32
          nullable: true
        iq_amount:
          type: integer
          description: IQ Amount allowed for the subscription. Null if unlimited
          format: int32
          nullable: true
        voucher_label:
          type: string
          description: Voucher label of the last redeemed voucher
          nullable: true
        voucher_code:
          type: string
          description: Voucher code of the last redeemed voucher
          nullable: true
        is_valid:
          type: boolean
          description: Indication whether current subscription is valid
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureResponse'
          description: Available Features for the subscription
          nullable: true
      additionalProperties: false
    SyncState:
      enum:
        - synchronized
        - pending
        - error
      type: string
    TagRegistrationRequest:
      required:
        - duration_in_seconds
      type: object
      properties:
        duration_in_seconds:
          type: integer
          description: Tag registration duration in seconds
          format: int32
      additionalProperties: false
    TagRegistrationState:
      enum:
        - not_started
        - in_progress
      type: string
    TimeAttendanceReportRequest:
      required:
        - from_date
        - lock_in_id
        - lock_out_id
        - to_date
      type: object
      properties:
        from_date:
          type: string
          description: Report's starting date
          format: date-time
        to_date:
          type: string
          description: Report's end date
          format: date-time
        lock_in_id:
          type: string
          description: Check in lock id
          format: uuid
        lock_out_id:
          type: string
          description: Check out lock id
          format: uuid
      additionalProperties: false
    TreeItemResponse:
      type: object
      properties:
        mac:
          type: string
          description: The mac adress of the hardware (lock|repeater)
          nullable: true
        customer_reference:
          type: string
          description: The name/reference given to the hardware by the client
          nullable: true
        lock_type:
          $ref: '#/components/schemas/LockType'
        is_online:
          type: boolean
          description: If the hardware is online
        is_attached:
          type: boolean
          description: If the hardware is attached
        battery_state:
          $ref: '#/components/schemas/BatteryStates'
        communication_type:
          $ref: '#/components/schemas/HardwareCommunicationType'
        id:
          type: string
          description: The id of the hardware (lock|repeater)
          format: uuid
        parent_id:
          type: string
          description: The id of the parent HW
          format: uuid
          nullable: true
        hardware_type:
          $ref: '#/components/schemas/HardwareType'
      additionalProperties: false
      description: Represents a tree item
    TreeItemSummary:
      type: object
      properties:
        id:
          type: string
          description: The id of the hardware (lock|repeater)
          format: uuid
        parent_id:
          type: string
          description: The id of the parent HW
          format: uuid
          nullable: true
        hardware_type:
          $ref: '#/components/schemas/HardwareType'
      additionalProperties: false
      description: Represents a tree item
    UserShortResponse:
      type: object
      properties:
        id:
          type: string
          description: id of the user
          format: uuid
        first_name:
          type: string
          description: First name of the user
          nullable: true
        last_name:
          type: string
          description: Last name of the user
          nullable: true
      additionalProperties: false
    UserShortResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserShortResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    UserShortSummary:
      type: object
      properties:
        id:
          type: string
          description: id of the user
          format: uuid
        image_url:
          type: string
          description: The url of the profile picture
          nullable: true
        first_name:
          type: string
          description: First name of the user
          nullable: true
        last_name:
          type: string
          description: Last name of the user
          nullable: true
      additionalProperties: false
      description: Short summary of a user
    UserSubscriptionState:
      enum:
        - subscribed
        - suspended
      type: string
    UserSummaryResponse:
      type: object
      properties:
        email:
          type: string
          description: email of the user
          nullable: true
        image_url:
          type: string
          description: The url of the profile picture
          nullable: true
        tag_number:
          type: string
          description: Tag number
          nullable: true
        is_managed_by_current_site:
          type: boolean
          description: Whether the user is managed by the selected site
        has_profile:
          type: boolean
          description: Whether the user has its own profile
        id:
          type: string
          description: id of the user
          format: uuid
        first_name:
          type: string
          description: First name of the user
          nullable: true
        last_name:
          type: string
          description: Last name of the user
          nullable: true
      additionalProperties: false
    UserSummaryResponsePagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserSummaryResponse'
          nullable: true
        next_page_link:
          type: string
          nullable: true
        count:
          type: integer
          format: int64
          nullable: true
      additionalProperties: false
    UserSummaryWithAliasResponse:
      type: object
      properties:
        alias:
          type: string
          description: Alias given to a user on a certain site
          nullable: true
        id:
          type: string
          description: id of the user
          format: uuid
        first_name:
          type: string
          description: First name of the user
          nullable: true
        last_name:
          type: string
          description: Last name of the user
          nullable: true
      additionalProperties: false
    UserWithEmailShortResponse:
      type: object
      properties:
        email:
          type: string
          description: Email of the user
          nullable: true
        id:
          type: string
          description: id of the user
          format: uuid
        first_name:
          type: string
          description: First name of the user
          nullable: true
        last_name:
          type: string
          description: Last name of the user
          nullable: true
      additionalProperties: false
    VoucherResponse:
      type: object
      properties:
        id:
          type: string
          description: Voucher's Id
          format: uuid
        code:
          type: string
          description: Code used to redeem the Voucher
          nullable: true
        tenant_id:
          type: string
          description: Tenant Id
          format: uuid
        user_amount:
          type: integer
          description: "Number of users allowed per site by the voucher.\r\nIgnored if UserUnlimited is true"
          format: int32
        user_unlimited:
          type: boolean
          description: True if voucher allows unlimited number of users
        month_span:
          type: integer
          description: "Number of months the subscription created from this voucher will be valid for.\r\nIgnored if MonthSpanUnlimited is true"
          format: int32
        month_span_unlimited:
          type: boolean
          description: True if voucher will create an endless subscription
        iq_amount:
          type: integer
          description: "Number of IQs allowed per site by the voucher.\r\nIgnored if IqUnlimited is true"
          format: int32
        iq_unlimited:
          type: boolean
          description: True if voucher allows unlimited number of IQs
        type:
          type: string
          description: "standard/expansion/renewal.\r\nthis value is for information purpose only"
          nullable: true
        customer_uid:
          type: string
          description: Customer Uid of the site this Voucher is issued for
          nullable: true
        label:
          type: string
          description: Voucher's Label
          nullable: true
        activation_date:
          type: string
          description: "Date on which the Voucher was activated.\r\nNull if the Voucher wasn't activated"
          format: date-time
          nullable: true
        start_date:
          type: string
          description: "Start Date of the Subscription created from the Voucher.\r\nNull if the Voucher wasn't activated"
          format: date-time
          nullable: true
        end_date:
          type: string
          description: "End Date of the Subscription created from the Voucher.\r\nNull if the Voucher wasn't activated (or if Subscription is endless)"
          format: date-time
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Please insert 'Bearer {JWT}' into the field
      name: Authorization
      in: header
security:
  - Bearer: []
